name: Java CI/CD Pipeline

# Trigger workflow on push and pull request to main and develop branches
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

# Global environment variables
env:
  JAVA_VERSION: '11'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Test and build job
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    # Checkout source code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Set up Java JDK
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    # Cache Maven dependencies to speed up builds
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    # Validate Maven project
    - name: Validate Maven project
      run: mvn validate
      
    # Compile the project
    - name: Compile project
      run: mvn clean compile
      
    # Run unit tests (including MessageTest)
    - name: Run unit tests
      run: mvn test
      
    # Generate test coverage report
    - name: Generate test coverage report
      run: mvn jacoco:report
      continue-on-error: true # Don't fail if jacoco is not configured
      
    # Upload coverage to Codecov (optional)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true
        
    # Package the application
    - name: Package application
      run: mvn package -DskipTests
      
    # Archive build artifacts
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifacts
        path: target/*.jar
        retention-days: 30
        
    # Archive test reports
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 30

    # Publish test results
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true

  # Code quality analysis job (optional - requires SonarCloud setup)
  code-quality:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    # Run static analysis tools
    - name: Run SpotBugs analysis
      run: mvn spotbugs:check
      continue-on-error: true
      
    # SonarCloud analysis (uncomment if you have SonarCloud configured)
    # - name: SonarCloud Scan
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   run: mvn sonar:sonar -Dsonar.projectKey=your-project-key

  # Security scan job
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Run dependency vulnerability check
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'QuickChat'
        path: '.'
        format: 'HTML'
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
        retention-days: 30

  # Deployment job (for releases)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifacts
        path: target/
        
    # Create GitHub Release for tags
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: QuickChat Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## QuickChat Application Release ${{ github.ref_name }}
          
          ### Features
          - User registration and authentication
          - Message sending and validation
          - Hash generation for messages
          - Message storage functionality
          
          ### Installation
          1. Download the JAR file
          2. Run with: java -jar quickchat-application.jar
          
          ### Requirements
          - Java 11 or higher
        
    # Upload artifacts to release
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/loginapplication-1.0-SNAPSHOT.jar
        asset_name: quickchat-application-${{ github.ref_name }}.jar
        asset_content_type: application/java-archive

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [test-and-build, code-quality, security-scan, deploy]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        echo "## 🏗 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test & Build | ${{ needs.test-and-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Success' || needs.code-quality.result == 'skipped' && '⏭ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Success' || needs.security-scan.result == 'skipped' && '⏭ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅ Success' || needs.deploy.result == 'skipped' && '⏭ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify on success
      if: needs.test-and-build.result == 'success'
      run: |
        echo "✅ QuickChat build completed successfully!"
        echo "📊 Test results and artifacts are available in the Actions tab"
        echo "🚀 Application is ready for deployment"
        
    - name: Notify on failure
      if: needs.test-and-build.result == 'failure'
      run: |
        echo "❌ QuickChat build failed!"
        echo "🔍 Check the logs above for details"
        echo "📧 Consider reviewing your code changes"
        exit 1
